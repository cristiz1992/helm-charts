{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "properties": {
    "nameOverride": {
      "type":"string",
      "description": "Overrides the name prefix of all resources deployed. Default value is .Release.Name."
    },
    "partOf": {
      "type":"string",
      "description": "Overrides label app.kubernetes.io/part-of. Default value is name."
    },
    "image": {
      "properties": {
        "registry": { "type": "string", "description": "Docker registry. Default is docker.io." },
        "repository": {"type":"string", "description": "Name of image"},
        "tag": {"type":"string", "description": "Version of image"},
        "pullPolicy": {"type":"string", "description": "Policy for pulling image. Default is IfNotPresent."},
        "credentials": {
          "properties": {
            "username": {"type":"string"},
            "password": {"type":"string"},
            "email": {"type":"string"}
          }
        }
      },
      "required": ["repository"]
    },
    "persistence": {
      "properties": {
        "enable": {"type":"boolean", "description": "Enable flag for persistent volume claim. It is used by all pods generated by this helm chart except the migrationJob. Default is false."},
        "existingClaim": {"type":"string", "description": "Name of existing persistent volume claim."},
        "nameOverride": {"type":"string", "description": "Overrides name of persistent volume claim. Default is {name}-pvc."},
        "accessMode": {"enum":["ReadWriteOnce","ReadOnlyMany","ReadWriteMany","ReadWriteOncePod"], "description": "Access mode of pvc. Default is ReadWriteOnce."},
        "size": {"type":"string"},
        "path": {"type":"string"},
        "subPath": {"type": "string"}
      },
      "required": ["path", "size", "accessMode", "enable"]
    },
    "ports": {
      "type":"object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "containerPort": {"type":"number"},
          "protocol": {"enum": ["TCP","UDP"]}
        }
      }
    },
    "deployment": {
      "properties": {
        "enable": {"type":"boolean"},
        "component": {"type":"string", "description": "Used in label app.kubernetes.io/component.", "default": "webapp"},
        "replicas": {"type":"number"},
        "initContainers": {"type":"array", "items": {"type":"object", "additionalProperties": true}},
        "additionalContainers": {"type":"array", "items": {"type":"object", "additionalProperties": true}},
        "command": {"type":"array", "items": {"type":"string"}},
        "args": {"type":"array", "items": {"type":"string"}},
        "readinessPath": {"type":"string"},
        "livenessPath": {"type":"string"},
        "configurationsAndSecretsIncludeMode": {"enum": ["None", "Resources", "Environment"], "description": "None -> does not include .Values.configurations and .Value.secrets to the pod definition; Environment -> includes .Values.configurations and .Value.secrets as environment variables to the pods definition env; Resources -> includes .Values.configurations and .Value.secrets configmap, respectively secret into pod definition envFrom."}
      },
      "required": ["enable", "configurationsAndSecretsIncludeMode"]
    },
    "migrationJob": {
      "description": "Creates a Job that runs before the rest of resources are installed. Used for database migrations.",
      "properties": {
        "enable": {"type":"boolean"},
        "command": {"type":"array", "items": {"type":"string"}},
        "args": {"type":"array", "items": {"type":"string"}},
        "component": {"type":"string", "description": "Used in label app.kubernetes.io/component.", "default": "migration-job"},
        "excludeVolumes": {"type":"boolean", "description": "Excludes volumes from being specified in the job definition. Any other resource is not available when the job is created.", "default": true},        
        "configurationsAndSecretsIncludeMode": {"enum": ["None", "Resources", "Environment"], "description": "None -> does not include .Values.configurations and .Value.secrets to the pod definition; Environment -> includes .Values.configurations and .Value.secrets as environment variables to the pods definition env; Resources -> includes .Values.configurations and .Value.secrets configmap, respectively secret into pod definition envFrom."}
      },
      "required": ["enable", "configurationsAndSecretsIncludeMode"]
    },
    "cronJobs": {
      "type":"object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "schedule": {"type":"string", "description": "Cron expression"},
          "command": {"type":"array", "items": {"type":"string"}},
          "args": {"type":"array", "items": {"type":"string"}},
          "configurationsAndSecretsIncludeMode": {"enum": ["None", "Resources", "Environment"], "description": "None -> does not include .Values.configurations and .Value.secrets to the pod definition; Environment -> includes .Values.configurations and .Value.secrets as environment variables to the pods definition env; Resources -> includes .Values.configurations and .Value.secrets configmap, respectively secret into pod definition envFrom."}
        },
        "required": ["schedule", "configurationsAndSecretsIncludeMode"]
      }
    },
    "env": {"type":"array", "items": {"type":"object", "additionalProperties": true}},
    "envFrom": {"type":"array", "items": {"type":"object", "additionalProperties": true}},
    "additionalVolumes": {"type":["array", "string"], "items": {"type":"object", "additionalProperties": true}},
    "additionalVolumeMounts": {"type":["array", "string"], "items": {"type":"object", "additionalProperties": true}},
    "configurations": {"type": ["object", "null"], "additionalProperties": true, "description": "Values for ConfigMap."},
    "secrets": {"type": ["object", "null"], "additionalProperties": true, "description": "Values for Secret."},
    "ingressRoute": {
      "type":"object",
      "properties": {
        "enable": { "type":"boolean" },
        "ssl": { "type":"boolean" },        
        "host": { "type":"string" },
        "paths": { "type":"array", "items": {"type":"string"} },
        "scheme": { "enum":["http","https"] },
        "entryPoints": {
          "type":"array",
          "default": "web and websecure",
          "items": {
            "type":"string"
          }
        }
      },
      "required": ["host","enable"]
    },
    "additionalIngressRoutes": {
      "type":"array",
      "items": {
        "type": "object",
        "properties": {
          "host": { "type":"string" },
          "paths": { "type":"array", "items": {"type":"string"} },
          "scheme": { "enum":["http","https"] },
          "service": {
            "type":"object",
            "properties": {
              "name": {"type": "string"},
              "port": {"type": "integer"},
              "namespace": {"type": "string"}
            },
            "required": ["name", "port"]
          }
        },
        "required": ["host", "service"]
      }      
    },
    "resources": {
      "type": "object",
      "properties": {
        "limits": {
          "type": "object",
          "properties": {
            "cpu": {"type":["string","integer"]},
            "memory": {"type":["string","integer"]}
          },
          "required": ["cpu", "memory"]
        },
        "requests": {
          "type": "object",
          "properties": {
            "cpu": {"type":["string","integer"]},
            "memory": {"type":["string","integer"]}
          },
          "required": ["cpu", "memory"]
        }
      },
      "required": ["limits", "requests"]
    },
    "securityContext": {"type":"object", "additionalProperties": true},
    "readinessProbe": {
      "type":"object",
      "properties": {
        "failureThreshold": {"type":"number", "description": "The number of consecutive failures allowed before considering the probe as failed."},
        "initialDelaySeconds": {"type":"number", "description": "The number of seconds to wait before starting the first probe."},
        "periodSeconds": {"type":"number", "description": "The number of seconds to wait between consecutive probes."},
        "successThreshold": {"type":"number", "description": "The minimum consecutive successes required to consider the probe successful."},
        "timeoutSeconds": {"type":"number", "description": "The number of seconds to wait for a probe response before considering it as failed."}
      }
    },
    "livenessProbe": {
      "type":"object",
      "properties": {
        "failureThreshold": {"type":"number", "description": "The number of consecutive failures allowed before considering the probe as failed."},
        "initialDelaySeconds": {"type":"number", "description": "The number of seconds to wait before starting the first probe."},
        "periodSeconds": {"type":"number", "description": "The number of seconds to wait between consecutive probes."},
        "successThreshold": {"type":"number", "description": "The minimum consecutive successes required to consider the probe successful."},
        "timeoutSeconds": {"type":"number", "description": "The number of seconds to wait for a probe response before considering it as failed."}
      }
    }
  },    
  "required": [
    "image", "ports", "resources"
  ],
  "type": "object"
}